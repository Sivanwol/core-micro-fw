// <auto-generated />
using System;
using System.Collections.Generic;
using Domain.DTO.ConfigurableEntities;
using Domain.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Domain.Persistence.Migrations
{
    [DbContext(typeof(DomainContext))]
    [Migration("20240604102020_rename_categoires_tables")]
    partial class rename_categoires_tables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("app")
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.ActivityLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Activity")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("activity");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("details");

                    b.Property<string>("EntityId")
                        .HasColumnType("text")
                        .HasColumnName("entity_id");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("entity_type");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("ip_address");

                    b.Property<string>("OperationType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("operation_type");

                    b.Property<string>("OwnerUserId")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)")
                        .HasColumnName("owner_user_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("status");

                    b.Property<string>("UserAgent")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("user_agent");

                    b.Property<string>("UserId")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_activity_logs");

                    b.HasIndex("OwnerUserId")
                        .HasDatabaseName("ix_activity_logs_owner_user_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_activity_logs_user_id");

                    b.ToTable("activity-logs");
                });

            modelBuilder.Entity("Domain.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<int>("CountryId")
                        .HasColumnType("integer")
                        .HasColumnName("country_id");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deleted_at");

                    b.Property<int>("DisplayLanguageId")
                        .HasColumnType("integer")
                        .HasColumnName("display_language_id");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("email_confirmed");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockout_end");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<DateTime?>("RegisterCompletedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("register_completed_at");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text")
                        .HasColumnName("security_stamp");

                    b.Property<bool>("TermsApproved")
                        .HasColumnType("boolean")
                        .HasColumnName("terms_approved");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("token");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_users");

                    b.HasIndex("CountryId")
                        .HasDatabaseName("ix_asp_net_users_country_id");

                    b.HasIndex("DisplayLanguageId")
                        .HasDatabaseName("ix_asp_net_users_display_language_id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.ApplicationUserOtpCodes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("code");

                    b.Property<DateTime?>("ComplateAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("complate_at");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6)");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("expiration_date");

                    b.Property<byte>("ProviderType")
                        .HasColumnType("smallint")
                        .HasColumnName("provider_type");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("token");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<string>("UserId1")
                        .HasColumnType("text")
                        .HasColumnName("user_id1");

                    b.HasKey("Id")
                        .HasName("pk_user_otps");

                    b.HasIndex("Token")
                        .IsUnique()
                        .HasDatabaseName("ix_user_otps_token");

                    b.HasIndex("UserId1")
                        .HasDatabaseName("ix_user_otps_user_id1");

                    b.ToTable("user-otps");
                });

            modelBuilder.Entity("Domain.Entities.ApplicationUserPreferences", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6)");

                    b.Property<string>("PreferenceKey")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("preference_key");

                    b.Property<string>("PreferenceValue")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("preference_value");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId");

                    b.Property<string>("UserId1")
                        .HasColumnType("text")
                        .HasColumnName("user_id1");

                    b.HasKey("Id")
                        .HasName("pk_user_preferences");

                    b.HasIndex("UserId1")
                        .HasDatabaseName("ix_user_preferences_user_id1");

                    b.HasIndex("UserId", "PreferenceKey")
                        .IsUnique()
                        .HasDatabaseName("ix_user_preferences_user_id_preference_key");

                    b.ToTable("user-preferences");
                });

            modelBuilder.Entity("Domain.Entities.ApplicationUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("RoleId")
                        .HasColumnType("text")
                        .HasColumnName("role_id");

                    b.Property<string>("RoleId1")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role_id1");

                    b.Property<string>("UserId1")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id1");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_asp_net_user_roles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_user_roles_role_id");

                    b.HasIndex("RoleId1")
                        .HasDatabaseName("ix_asp_net_user_roles_role_id1");

                    b.HasIndex("UserId1")
                        .HasDatabaseName("ix_asp_net_user_roles_user_id1");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.AspNetRoles", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_roles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Assets", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("integer")
                        .HasColumnName("client_id");

                    b.Property<string>("Cpu")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("cpu");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deleted_at");

                    b.Property<int>("ExtraMediaId")
                        .HasColumnType("integer")
                        .HasColumnName("extra_media_id");

                    b.Property<bool?>("IsRaidSupported")
                        .HasColumnType("boolean")
                        .HasColumnName("is_raid_supported");

                    b.Property<bool?>("IsVMSupported")
                        .HasColumnType("boolean")
                        .HasColumnName("is_vm_supported");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("label");

                    b.Property<string>("Memory")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("memory");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("model");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<int>("ProviderId")
                        .HasColumnType("integer")
                        .HasColumnName("provider_id");

                    b.Property<int?>("RaidNumber")
                        .HasColumnType("integer")
                        .HasColumnName("raid_number");

                    b.Property<string>("ServiceTag")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("service_tag");

                    b.Property<int>("ServiceTagMediaId")
                        .HasColumnType("integer")
                        .HasColumnName("service_tag_media_id");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<string>("StorageHDD1")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("storage_hdd1");

                    b.Property<string>("StorageHDD2")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("storage_hdd2");

                    b.Property<string>("StorageHDD3")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("storage_hdd3");

                    b.Property<string>("StorageHDD4")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("storage_hdd4");

                    b.Property<string>("StorageSSD1")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("storage_ssd1");

                    b.Property<string>("StorageSSD2")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("storage_ssd2");

                    b.Property<string>("StorageSSD3")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("storage_ssd3");

                    b.Property<string>("StorageSSD4")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("storage_ssd4");

                    b.Property<string>("SubModel")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("sub_model");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6)");

                    b.Property<int>("VendorId")
                        .HasColumnType("integer")
                        .HasColumnName("vendor_id");

                    b.HasKey("Id")
                        .HasName("pk_assets");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("ix_assets_client_id");

                    b.HasIndex("ExtraMediaId")
                        .HasDatabaseName("ix_assets_extra_media_id");

                    b.HasIndex("ProviderId")
                        .HasDatabaseName("ix_assets_provider_id");

                    b.HasIndex("VendorId")
                        .HasDatabaseName("ix_assets_vendor_id");

                    b.ToTable("assets", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.ClientContacts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("address");

                    b.Property<string>("City")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("city");

                    b.Property<int>("ClientId")
                        .HasColumnType("integer")
                        .HasColumnName("client_id");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("company");

                    b.Property<int>("CountryId")
                        .HasColumnType("integer")
                        .HasColumnName("country_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Department")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("department");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(500)")
                        .HasColumnName("email");

                    b.Property<string>("Fax")
                        .HasColumnType("varchar(20)")
                        .HasColumnName("fax");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("varchar(75)")
                        .HasColumnName("first_name");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("job_title");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("varchar(75)")
                        .HasColumnName("last_name");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<string>("Phone1")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("phone1");

                    b.Property<string>("Phone2")
                        .HasColumnType("varchar(20)")
                        .HasColumnName("phone2");

                    b.Property<string>("PostalCode")
                        .HasColumnType("varchar(10)")
                        .HasColumnName("postal_code");

                    b.Property<string>("State")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("state");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6)");

                    b.Property<string>("Whatsapp")
                        .HasColumnType("varchar(20)")
                        .HasColumnName("whatsapp");

                    b.HasKey("Id")
                        .HasName("pk_client_contacts");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("ix_client_contacts_client_id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_client_contacts_email");

                    b.HasIndex("CountryId", "FirstName", "LastName")
                        .IsUnique()
                        .HasDatabaseName("ix_client_contacts_country_id_first_name_last_name");

                    b.HasIndex("FirstName", "LastName", "ClientId", "CountryId")
                        .IsUnique()
                        .HasDatabaseName("ix_client_contacts_first_name_last_name_client_id_country_id");

                    b.ToTable("client-contacts");
                });

            modelBuilder.Entity("Domain.Entities.ClientEmployeeHasTags", b =>
                {
                    b.Property<int>("EmployeeId")
                        .HasColumnType("integer")
                        .HasColumnName("employee_id");

                    b.Property<int>("TagId")
                        .HasColumnType("integer")
                        .HasColumnName("tag_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("EmployeeId", "TagId")
                        .HasName("pk_client_employees_has_tags");

                    b.HasIndex("TagId")
                        .HasDatabaseName("ix_client_employees_has_tags_tag_id");

                    b.ToTable("client-employees-has-tags");
                });

            modelBuilder.Entity("Domain.Entities.ClientEmployees", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AssetId")
                        .HasColumnType("integer")
                        .HasColumnName("asset_id");

                    b.Property<int>("ClientId")
                        .HasColumnType("integer")
                        .HasColumnName("client_id");

                    b.Property<int>("ContactEmployeeId")
                        .HasColumnType("integer")
                        .HasColumnName("contact_employee_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deleted_at");

                    b.Property<DateTime?>("DisabledAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("disabled_at");

                    b.Property<int>("NetworkId")
                        .HasColumnType("integer")
                        .HasColumnName("network_id");

                    b.Property<int>("ServerId")
                        .HasColumnType("integer")
                        .HasColumnName("server_id");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6)");

                    b.HasKey("Id")
                        .HasName("pk_client_employees");

                    b.HasIndex("AssetId")
                        .HasDatabaseName("ix_client_employees_asset_id");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("ix_client_employees_client_id");

                    b.HasIndex("ContactEmployeeId")
                        .HasDatabaseName("ix_client_employees_contact_employee_id");

                    b.HasIndex("NetworkId")
                        .HasDatabaseName("ix_client_employees_network_id");

                    b.HasIndex("ServerId")
                        .HasDatabaseName("ix_client_employees_server_id");

                    b.ToTable("client-employees");
                });

            modelBuilder.Entity("Domain.Entities.ClientEmployeesHasAssets", b =>
                {
                    b.Property<int>("ClientEmployeeId")
                        .HasColumnType("integer")
                        .HasColumnName("client_employee_id");

                    b.Property<int>("AssetId")
                        .HasColumnType("integer")
                        .HasColumnName("asset_id");

                    b.Property<int>("ContactEmployeeId")
                        .HasColumnType("integer")
                        .HasColumnName("contact_employee_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deleted_at");

                    b.Property<DateTime?>("DisabledAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("disabled_at");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("integer")
                        .HasColumnName("employee_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("ClientEmployeeId", "AssetId")
                        .HasName("pk_client_employees_has_assets");

                    b.HasIndex("AssetId")
                        .HasDatabaseName("ix_client_employees_has_assets_asset_id");

                    b.HasIndex("ContactEmployeeId")
                        .HasDatabaseName("ix_client_employees_has_assets_contact_employee_id");

                    b.HasIndex("EmployeeId")
                        .HasDatabaseName("ix_client_employees_has_assets_employee_id");

                    b.ToTable("client-employees-has-assets");
                });

            modelBuilder.Entity("Domain.Entities.ClientHardware", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AssetId")
                        .HasColumnType("integer")
                        .HasColumnName("asset_id");

                    b.Property<int>("ClientId")
                        .HasColumnType("integer")
                        .HasColumnName("client_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deleted_at");

                    b.Property<DateTime?>("DisabledAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("disabled_at");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("label");

                    b.Property<int>("NetworkId")
                        .HasColumnType("integer")
                        .HasColumnName("network_id");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6)");

                    b.HasKey("Id")
                        .HasName("pk_client_hardware");

                    b.HasIndex("AssetId")
                        .HasDatabaseName("ix_client_hardware_asset_id");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("ix_client_hardware_client_id");

                    b.HasIndex("NetworkId")
                        .HasDatabaseName("ix_client_hardware_network_id");

                    b.ToTable("client-hardware");
                });

            modelBuilder.Entity("Domain.Entities.ClientNetworkHasTags", b =>
                {
                    b.Property<int>("NetworkId")
                        .HasColumnType("integer")
                        .HasColumnName("network_id");

                    b.Property<int>("TagId")
                        .HasColumnType("integer")
                        .HasColumnName("tag_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("NetworkId", "TagId")
                        .HasName("pk_client_network_has_tags");

                    b.HasIndex("TagId")
                        .HasDatabaseName("ix_client_network_has_tags_tag_id");

                    b.ToTable("client-network-has-tags");
                });

            modelBuilder.Entity("Domain.Entities.ClientNetworks", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AssetId")
                        .HasColumnType("integer")
                        .HasColumnName("asset_id");

                    b.Property<int>("ClientId")
                        .HasColumnType("integer")
                        .HasColumnName("client_id");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("color");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deleted_at");

                    b.Property<DateTime?>("DisabledAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("disabled_at");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("label");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6)");

                    b.HasKey("Id")
                        .HasName("pk_client_networks");

                    b.HasIndex("AssetId")
                        .HasDatabaseName("ix_client_networks_asset_id");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("ix_client_networks_client_id");

                    b.ToTable("client-networks");
                });

            modelBuilder.Entity("Domain.Entities.ClientNetworksHasAssets", b =>
                {
                    b.Property<int>("ClientNetworkId")
                        .HasColumnType("integer")
                        .HasColumnName("client_network_id");

                    b.Property<int>("AssetId")
                        .HasColumnType("integer")
                        .HasColumnName("asset_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deleted_at");

                    b.Property<DateTime?>("DisabledAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("disabled_at");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("label");

                    b.Property<int>("NetworkId")
                        .HasColumnType("integer")
                        .HasColumnName("network_id");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("ClientNetworkId", "AssetId")
                        .HasName("pk_client_network_has_assets");

                    b.HasIndex("AssetId")
                        .HasDatabaseName("ix_client_network_has_assets_asset_id");

                    b.HasIndex("NetworkId")
                        .HasDatabaseName("ix_client_network_has_assets_network_id");

                    b.ToTable("client-network-has-assets");
                });

            modelBuilder.Entity("Domain.Entities.ClientServerHasTags", b =>
                {
                    b.Property<int>("ServerId")
                        .HasColumnType("integer")
                        .HasColumnName("server_id");

                    b.Property<int>("TagId")
                        .HasColumnType("integer")
                        .HasColumnName("tag_id");

                    b.Property<int?>("ClientHardwareId")
                        .HasColumnType("integer")
                        .HasColumnName("client_hardware_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("ServerId", "TagId")
                        .HasName("pk_client_server_has_tags");

                    b.HasIndex("ClientHardwareId")
                        .HasDatabaseName("ix_client_server_has_tags_client_hardware_id");

                    b.HasIndex("TagId")
                        .HasDatabaseName("ix_client_server_has_tags_tag_id");

                    b.ToTable("client-server-has-tags");
                });

            modelBuilder.Entity("Domain.Entities.ClientServers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("integer")
                        .HasColumnName("client_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deleted_at");

                    b.Property<DateTime?>("DisabledAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("disabled_at");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("label");

                    b.Property<int>("NetworkId")
                        .HasColumnType("integer")
                        .HasColumnName("network_id");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6)");

                    b.HasKey("Id")
                        .HasName("pk_client_servers");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("ix_client_servers_client_id");

                    b.HasIndex("NetworkId")
                        .HasDatabaseName("ix_client_servers_network_id");

                    b.ToTable("client-servers");
                });

            modelBuilder.Entity("Domain.Entities.ClientServersHasAssets", b =>
                {
                    b.Property<int>("ClientServerId")
                        .HasColumnType("integer")
                        .HasColumnName("client_server_id");

                    b.Property<int>("AssetId")
                        .HasColumnType("integer")
                        .HasColumnName("asset_id");

                    b.Property<int?>("ClientHardwareId")
                        .HasColumnType("integer")
                        .HasColumnName("client_hardware_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deleted_at");

                    b.Property<DateTime?>("DisabledAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("disabled_at");

                    b.Property<int>("ServerId")
                        .HasColumnType("integer")
                        .HasColumnName("server_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("ClientServerId", "AssetId")
                        .HasName("pk_client_server_has_assets");

                    b.HasIndex("AssetId")
                        .HasDatabaseName("ix_client_server_has_assets_asset_id");

                    b.HasIndex("ClientHardwareId")
                        .HasDatabaseName("ix_client_server_has_assets_client_hardware_id");

                    b.HasIndex("ServerId")
                        .HasDatabaseName("ix_client_server_has_assets_server_id");

                    b.ToTable("client-server-has-assets");
                });

            modelBuilder.Entity("Domain.Entities.Clients", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("address");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("city");

                    b.Property<int>("CountryId")
                        .HasColumnType("integer")
                        .HasColumnName("country_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime?>("DisabledAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("disabled_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("OwnerUserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("owner_user_id");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer")
                        .HasColumnName("parent_id");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6)");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasColumnType("varchar(500)")
                        .HasColumnName("website");

                    b.HasKey("Id")
                        .HasName("pk_clients");

                    b.HasIndex("CountryId")
                        .HasDatabaseName("ix_clients_country_id");

                    b.HasIndex("ParentId")
                        .HasDatabaseName("ix_clients_parent_id");

                    b.HasIndex("Name", "OwnerUserId")
                        .IsUnique()
                        .HasDatabaseName("ix_clients_name_owner_user_id");

                    b.HasIndex("OwnerUserId", "ParentId", "CountryId", "Address", "City", "Name")
                        .IsUnique()
                        .HasDatabaseName("ix_clients_owner_user_id_parent_id_country_id_address_city_name");

                    b.ToTable("clients", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.ConfigurableCategories", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Icon")
                        .HasColumnType("text")
                        .HasColumnName("icon");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<int?>("ParentCategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("parent_category_id");

                    b.Property<int>("Position")
                        .HasColumnType("integer")
                        .HasColumnName("position");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6)");

                    b.HasKey("Id")
                        .HasName("pk_configurable_categories");

                    b.ToTable("configurable-categories");
                });

            modelBuilder.Entity("Domain.Entities.ConfigurableEntityColumnDefinition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("category_id");

                    b.Property<string>("ColumnName")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("column_name");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6)");

                    b.Property<int>("DataType")
                        .HasColumnType("integer")
                        .HasColumnName("data_type");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime?>("DisabledAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("disabled_at");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("display_name");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("entity_name");

                    b.Property<string>("FieldAlias")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("field_alias");

                    b.Property<string>("FieldFormatter")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("field_formatter");

                    b.Property<string>("FieldPath")
                        .IsRequired()
                        .HasColumnType("varchar(500)")
                        .HasColumnName("field_path");

                    b.Property<int>("FilterOperationType")
                        .HasColumnType("integer")
                        .HasColumnName("filter_operation_type");

                    b.Property<bool>("IsFilterable")
                        .HasColumnType("boolean")
                        .HasColumnName("is_filterable");

                    b.Property<bool>("IsSortable")
                        .HasColumnType("boolean")
                        .HasColumnName("is_sortable");

                    b.Property<bool>("IsVirtualColumn")
                        .HasColumnType("boolean")
                        .HasColumnName("is_virtual_column");

                    b.Property<string>("MetaData")
                        .IsRequired()
                        .HasColumnType("json")
                        .HasColumnName("meta_data");

                    b.Property<ICollection<string>>("Permissions")
                        .IsRequired()
                        .HasColumnType("json")
                        .HasColumnName("permissions");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6)");

                    b.HasKey("Id")
                        .HasName("pk_configurable_entity_column_definitions");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_configurable_entity_column_definitions_category_id");

                    b.HasIndex("EntityName", "ColumnName", "DisplayName")
                        .IsUnique()
                        .HasDatabaseName("ix_configurable_entity_column_definitions_entity_name_column_n");

                    b.ToTable("configurable-entity-column-definitions");
                });

            modelBuilder.Entity("Domain.Entities.ConfigurableUserView", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ClientUniqueKey")
                        .HasColumnType("uuid")
                        .HasColumnName("client_unique_key");

                    b.Property<string>("Color")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("color");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("description");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("entity_type");

                    b.Property<bool>("IsPredefined")
                        .HasColumnType("boolean")
                        .HasColumnName("is_predefined");

                    b.Property<bool>("IsShareAble")
                        .HasColumnType("boolean")
                        .HasColumnName("is_share_able");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer")
                        .HasColumnName("parent_id");

                    b.Property<ICollection<string>>("Permissions")
                        .IsRequired()
                        .HasColumnType("json")
                        .HasColumnName("permissions");

                    b.Property<ICollection<ConfigurableEntityMetaData>>("Settings")
                        .IsRequired()
                        .HasColumnType("json")
                        .HasColumnName("settings");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_configurable_user_views");

                    b.HasIndex("ParentId")
                        .HasDatabaseName("ix_configurable_user_views_parent_id");

                    b.HasIndex("UserId", "Name")
                        .IsUnique()
                        .HasDatabaseName("ix_configurable_user_views_user_id_name");

                    b.ToTable("configurable-user-views");
                });

            modelBuilder.Entity("Domain.Entities.ConfigurableUserViewHasConfigurableEntityColumnDefinition", b =>
                {
                    b.Property<int>("ConfigurableUserViewId")
                        .HasColumnType("integer")
                        .HasColumnName("configurable_user_view_id");

                    b.Property<int>("ConfigurableEntityColumnDefinitionId")
                        .HasColumnType("integer")
                        .HasColumnName("configurable_entity_column_definition_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsFixed")
                        .HasColumnType("boolean")
                        .HasColumnName("is_fixed");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("boolean")
                        .HasColumnName("is_hidden");

                    b.Property<int>("Position")
                        .HasColumnType("integer")
                        .HasColumnName("position");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("ConfigurableUserViewId", "ConfigurableEntityColumnDefinitionId")
                        .HasName("pk_configurable_user_view_has_configurable_entity_column_defin");

                    b.HasIndex("ConfigurableEntityColumnDefinitionId")
                        .HasDatabaseName("ix_configurable_user_view_has_configurable_entity_column_defin");

                    b.ToTable("configurable-user-view-has-configurable-entity-column-definitions");
                });

            modelBuilder.Entity("Domain.Entities.ConfigurableUserViewHasConfigurableUserViewTags", b =>
                {
                    b.Property<int>("ConfigurableUserViewId")
                        .HasColumnType("integer")
                        .HasColumnName("configurable_user_view_id");

                    b.Property<int>("ConfigurableUserViewTagsId")
                        .HasColumnType("integer")
                        .HasColumnName("configurable_user_view_tags_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("ConfigurableUserViewId", "ConfigurableUserViewTagsId")
                        .HasName("pk_configurable_user_view_has_configurable_user_view_tags");

                    b.HasIndex("ConfigurableUserViewTagsId")
                        .HasDatabaseName("ix_configurable_user_view_has_configurable_user_view_tags_conf");

                    b.ToTable("configurable-user-view-has-configurable-user-view-tags");
                });

            modelBuilder.Entity("Domain.Entities.ConfigurableUserViewTags", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_configurable_user_view_tags");

                    b.HasIndex("UserId", "Name")
                        .IsUnique()
                        .HasDatabaseName("ix_configurable_user_view_tags_user_id_name");

                    b.ToTable("configurable-user-view-tags");
                });

            modelBuilder.Entity("Domain.Entities.ConfigurableUserViewsFilterMacros", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("identifier");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("provider");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6)");

                    b.HasKey("Id")
                        .HasName("pk_configurable_user_view_filter_macros");

                    b.ToTable("configurable-user-view-filter-macros");
                });

            modelBuilder.Entity("Domain.Entities.ConfigurableUserViewsFilters", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6)");

                    b.Property<int>("FilterCollectionOperation")
                        .HasColumnType("integer")
                        .HasColumnName("filter_collection_operation");

                    b.Property<int>("FilterDateType")
                        .HasColumnType("integer")
                        .HasColumnName("filter_date_type");

                    b.Property<string>("FilterFieldName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("filter_field_name");

                    b.Property<int>("FilterFieldType")
                        .HasColumnType("integer")
                        .HasColumnName("filter_field_type");

                    b.Property<int?>("FilterMacroValueId")
                        .HasColumnType("integer")
                        .HasColumnName("filter_macro_value_id");

                    b.Property<int>("FilterOperations")
                        .HasColumnType("integer")
                        .HasColumnName("filter_operations");

                    b.Property<string>("FilterValues")
                        .HasColumnType("text")
                        .HasColumnName("filter_values");

                    b.Property<bool>("Global")
                        .HasColumnType("boolean")
                        .HasColumnName("global");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6)");

                    b.Property<string>("UserId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("user_id");

                    b.Property<int>("ViewId")
                        .HasColumnType("integer")
                        .HasColumnName("view_id");

                    b.HasKey("Id")
                        .HasName("pk_configurable_user_view_filters");

                    b.HasIndex("FilterMacroValueId")
                        .HasDatabaseName("ix_configurable_user_view_filters_filter_macro_value_id");

                    b.HasIndex("ViewId")
                        .HasDatabaseName("ix_configurable_user_view_filters_view_id");

                    b.HasIndex("UserId", "ViewId")
                        .HasDatabaseName("ix_configurable_user_view_filters_user_id_view_id");

                    b.ToTable("configurable-user-view-filters");
                });

            modelBuilder.Entity("Domain.Entities.Contacts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("address");

                    b.Property<string>("City")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("city");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("company");

                    b.Property<int>("CountryId")
                        .HasColumnType("integer")
                        .HasColumnName("country_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Department")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("department");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("email");

                    b.Property<string>("Fax")
                        .HasColumnType("varchar(20)")
                        .HasColumnName("fax");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("varchar(75)")
                        .HasColumnName("first_name");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("job_title");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("varchar(75)")
                        .HasColumnName("last_name");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<string>("Phone1")
                        .HasColumnType("varchar(20)")
                        .HasColumnName("phone1");

                    b.Property<string>("Phone2")
                        .HasColumnType("varchar(20)")
                        .HasColumnName("phone2");

                    b.Property<string>("PostalCode")
                        .HasColumnType("varchar(10)")
                        .HasColumnName("postal_code");

                    b.Property<string>("State")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("state");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6)");

                    b.Property<string>("Whatsapp")
                        .HasColumnType("varchar(20)")
                        .HasColumnName("whatsapp");

                    b.HasKey("Id")
                        .HasName("pk_contacts");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_contacts_email");

                    b.HasIndex("CountryId", "FirstName", "LastName")
                        .IsUnique()
                        .HasDatabaseName("ix_contacts_country_id_first_name_last_name");

                    b.ToTable("contacts", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Countries", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("varchar(5)")
                        .HasColumnName("country_code");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("country_name");

                    b.Property<string>("CountryNumber")
                        .IsRequired()
                        .HasColumnType("varchar(5)")
                        .HasColumnName("country_number");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6)");

                    b.Property<int?>("Provider")
                        .HasColumnType("integer")
                        .HasColumnName("provider");

                    b.Property<DateTime?>("SupportedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("supported_at");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6)");

                    b.HasKey("Id")
                        .HasName("pk_countries");

                    b.ToTable("countries", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Languages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(5)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6)");

                    b.Property<string>("Flag")
                        .HasColumnType("text")
                        .HasColumnName("flag");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("SupportedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("supported_at");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6)");

                    b.HasKey("Id")
                        .HasName("pk_languages");

                    b.ToTable("languages", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Media", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BucketName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("bucket_name");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("file_name");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("mime_type");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("path");

                    b.Property<long>("Size")
                        .HasColumnType("bigint")
                        .HasColumnName("size");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6)");

                    b.HasKey("Id")
                        .HasName("pk_media");

                    b.ToTable("media", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.ProviderCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6)");

                    b.HasKey("Id")
                        .HasName("pk_provider_category");

                    b.ToTable("provider_category", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.ProviderHasContact", b =>
                {
                    b.Property<int>("ProviderId")
                        .HasColumnType("integer")
                        .HasColumnName("provider_id");

                    b.Property<int>("ContactId")
                        .HasColumnType("integer")
                        .HasColumnName("contact_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("ProviderId", "ContactId")
                        .HasName("pk_providers_has_contacts");

                    b.HasIndex("ContactId")
                        .HasDatabaseName("ix_providers_has_contacts_contact_id");

                    b.ToTable("providers_has_contacts", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.ProviderHasProviderCategory", b =>
                {
                    b.Property<int>("ProviderId")
                        .HasColumnType("integer")
                        .HasColumnName("provider_id");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("category_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("ProviderId", "CategoryId")
                        .HasName("pk_providers_has_provider_category");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_providers_has_provider_category_category_id");

                    b.ToTable("providers_has_provider_category", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Providers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("city");

                    b.Property<int>("CountryId")
                        .HasColumnType("integer")
                        .HasColumnName("country_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime?>("DisabledAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("disabled_at");

                    b.Property<int?>("LogoId")
                        .HasColumnType("integer")
                        .HasColumnName("logo_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("ProviderType")
                        .HasColumnType("integer")
                        .HasColumnName("provider_type");

                    b.Property<string>("SiteUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("site_url");

                    b.Property<string>("SupportEmail")
                        .HasColumnType("text")
                        .HasColumnName("support_email");

                    b.Property<string>("SupportPhone")
                        .HasColumnType("text")
                        .HasColumnName("support_phone");

                    b.Property<string>("SupportUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("support_url");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6)");

                    b.HasKey("Id")
                        .HasName("pk_providers");

                    b.HasIndex("CountryId")
                        .HasDatabaseName("ix_providers_country_id");

                    b.HasIndex("LogoId")
                        .HasDatabaseName("ix_providers_logo_id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_providers_name");

                    b.ToTable("providers", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Tags", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6)");

                    b.HasKey("Id")
                        .HasName("pk_tags");

                    b.ToTable("tags", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.VendorHasContact", b =>
                {
                    b.Property<int>("VendorId")
                        .HasColumnType("integer")
                        .HasColumnName("vendor_id");

                    b.Property<int>("ContactId")
                        .HasColumnType("integer")
                        .HasColumnName("contact_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("VendorId", "ContactId")
                        .HasName("pk_vendor_has_contacts");

                    b.HasIndex("ContactId")
                        .HasDatabaseName("ix_vendor_has_contacts_contact_id");

                    b.ToTable("vendor_has_contacts", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Vendors", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("city");

                    b.Property<int?>("ClientId")
                        .HasColumnType("integer")
                        .HasColumnName("client_id");

                    b.Property<int>("CountryId")
                        .HasColumnType("integer")
                        .HasColumnName("country_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime?>("DisabledAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("disabled_at");

                    b.Property<int>("LogoId")
                        .HasColumnType("integer")
                        .HasColumnName("logo_id");

                    b.Property<int?>("Media")
                        .HasColumnType("integer")
                        .HasColumnName("media");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("SiteUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("site_url");

                    b.Property<string>("SupportEmail")
                        .HasColumnType("text")
                        .HasColumnName("support_email");

                    b.Property<string>("SupportPhone")
                        .HasColumnType("text")
                        .HasColumnName("support_phone");

                    b.Property<int>("SupportResponseType")
                        .HasColumnType("integer")
                        .HasColumnName("support_response_type");

                    b.Property<string>("SupportUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("support_url");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6)");

                    b.HasKey("Id")
                        .HasName("pk_vendors");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("ix_vendors_client_id");

                    b.HasIndex("CountryId")
                        .HasDatabaseName("ix_vendors_country_id");

                    b.HasIndex("Media")
                        .HasDatabaseName("ix_vendors_media");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_vendors_name");

                    b.ToTable("vendors", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.VendorsMetaData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("key");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.Property<int>("VendorId")
                        .HasColumnType("integer")
                        .HasColumnName("vendor_id");

                    b.HasKey("Id")
                        .HasName("pk_vendor_metadata");

                    b.HasIndex("VendorId")
                        .HasDatabaseName("ix_vendor_metadata_vendor_id");

                    b.ToTable("vendor_metadata", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_role_claims");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_role_claims_role_id");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_user_claims");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_claims_user_id");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text")
                        .HasColumnName("provider_display_name");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_asp_net_user_logins");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_logins_user_id");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_asp_net_user_tokens");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.ActivityLog", b =>
                {
                    b.HasOne("Domain.Entities.ApplicationUser", "OwnerUser")
                        .WithMany()
                        .HasForeignKey("OwnerUserId")
                        .HasConstraintName("fk_activity_logs_asp_net_users_owner_user_id");

                    b.HasOne("Domain.Entities.ApplicationUser", "User")
                        .WithMany("ActivityLogs")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_activity_logs_asp_net_users_user_id");

                    b.Navigation("OwnerUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.ApplicationUser", b =>
                {
                    b.HasOne("Domain.Entities.Countries", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_users_countries_country_id");

                    b.HasOne("Domain.Entities.Languages", "DisplayLanguage")
                        .WithMany()
                        .HasForeignKey("DisplayLanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_users_languages_display_language_id");

                    b.Navigation("Country");

                    b.Navigation("DisplayLanguage");
                });

            modelBuilder.Entity("Domain.Entities.ApplicationUserOtpCodes", b =>
                {
                    b.HasOne("Domain.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId1")
                        .HasConstraintName("fk_user_otps_users_user_id1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.ApplicationUserPreferences", b =>
                {
                    b.HasOne("Domain.Entities.ApplicationUser", "User")
                        .WithMany("Preferences")
                        .HasForeignKey("UserId1")
                        .HasConstraintName("fk_user_preferences_users_user_id1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.ApplicationUserRole", b =>
                {
                    b.HasOne("Domain.Entities.AspNetRoles", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_roles_role_id");

                    b.HasOne("Domain.Entities.AspNetRoles", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_roles_role_id1");

                    b.HasOne("Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_users_user_id");

                    b.HasOne("Domain.Entities.ApplicationUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_users_user_id1");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Assets", b =>
                {
                    b.HasOne("Domain.Entities.Clients", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_assets_clients_client_id");

                    b.HasOne("Domain.Entities.Media", "ExtraMedia")
                        .WithMany()
                        .HasForeignKey("ExtraMediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_assets_media_extra_media_id");

                    b.HasOne("Domain.Entities.Providers", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_assets_providers_provider_id");

                    b.HasOne("Domain.Entities.Vendors", "Vendor")
                        .WithMany()
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_assets_vendors_vendor_id");

                    b.Navigation("Client");

                    b.Navigation("ExtraMedia");

                    b.Navigation("Provider");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("Domain.Entities.ClientContacts", b =>
                {
                    b.HasOne("Domain.Entities.Clients", "Client")
                        .WithMany("Contacts")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_client_contacts_clients_client_id");

                    b.HasOne("Domain.Entities.Countries", "Country")
                        .WithMany("ClientContacts")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_client_contacts_countries_country_id");

                    b.Navigation("Client");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Domain.Entities.ClientEmployeeHasTags", b =>
                {
                    b.HasOne("Domain.Entities.ClientEmployees", "Employee")
                        .WithMany("Tags")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_client_employees_has_tags_client_employees_employee_id");

                    b.HasOne("Domain.Entities.Tags", "Tag")
                        .WithMany("ClientEmployees")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_client_employees_has_tags_tags_tag_id");

                    b.Navigation("Employee");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Domain.Entities.ClientEmployees", b =>
                {
                    b.HasOne("Domain.Entities.Assets", "Asset")
                        .WithMany()
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_client_employees_assets_asset_id");

                    b.HasOne("Domain.Entities.Clients", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_client_employees_clients_client_id");

                    b.HasOne("Domain.Entities.Contacts", "ContactEmployee")
                        .WithMany()
                        .HasForeignKey("ContactEmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_client_employees_contacts_contact_employee_id");

                    b.HasOne("Domain.Entities.ClientNetworks", "Network")
                        .WithMany()
                        .HasForeignKey("NetworkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_client_employees_client_networks_network_id");

                    b.HasOne("Domain.Entities.ClientServers", "Server")
                        .WithMany()
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_client_employees_client_servers_server_id");

                    b.Navigation("Asset");

                    b.Navigation("Client");

                    b.Navigation("ContactEmployee");

                    b.Navigation("Network");

                    b.Navigation("Server");
                });

            modelBuilder.Entity("Domain.Entities.ClientEmployeesHasAssets", b =>
                {
                    b.HasOne("Domain.Entities.Assets", "Asset")
                        .WithMany("Employees")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_client_employees_has_assets_assets_asset_id");

                    b.HasOne("Domain.Entities.ClientContacts", "ContactEmployee")
                        .WithMany()
                        .HasForeignKey("ContactEmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_client_employees_has_assets_client_contacts_contact_employe");

                    b.HasOne("Domain.Entities.ClientEmployees", "Employee")
                        .WithMany("Assets")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_client_employees_has_assets_client_employees_employee_id");

                    b.Navigation("Asset");

                    b.Navigation("ContactEmployee");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Domain.Entities.ClientHardware", b =>
                {
                    b.HasOne("Domain.Entities.Assets", "Asset")
                        .WithMany()
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_client_hardware_assets_asset_id");

                    b.HasOne("Domain.Entities.Clients", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_client_hardware_clients_client_id");

                    b.HasOne("Domain.Entities.ClientNetworks", "Network")
                        .WithMany()
                        .HasForeignKey("NetworkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_client_hardware_client_networks_network_id");

                    b.Navigation("Asset");

                    b.Navigation("Client");

                    b.Navigation("Network");
                });

            modelBuilder.Entity("Domain.Entities.ClientNetworkHasTags", b =>
                {
                    b.HasOne("Domain.Entities.ClientNetworks", "Network")
                        .WithMany("Tags")
                        .HasForeignKey("NetworkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_client_network_has_tags_client_networks_network_id");

                    b.HasOne("Domain.Entities.Tags", "Tag")
                        .WithMany("ClientNetworks")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_client_network_has_tags_tags_tag_id");

                    b.Navigation("Network");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Domain.Entities.ClientNetworks", b =>
                {
                    b.HasOne("Domain.Entities.Assets", "Asset")
                        .WithMany()
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_client_networks_assets_asset_id");

                    b.HasOne("Domain.Entities.Clients", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_client_networks_clients_client_id");

                    b.Navigation("Asset");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Domain.Entities.ClientNetworksHasAssets", b =>
                {
                    b.HasOne("Domain.Entities.Assets", "Asset")
                        .WithMany("Networks")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_client_network_has_assets_assets_asset_id");

                    b.HasOne("Domain.Entities.ClientNetworks", "Network")
                        .WithMany("Assets")
                        .HasForeignKey("NetworkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_client_network_has_assets_client_networks_network_id");

                    b.Navigation("Asset");

                    b.Navigation("Network");
                });

            modelBuilder.Entity("Domain.Entities.ClientServerHasTags", b =>
                {
                    b.HasOne("Domain.Entities.ClientHardware", null)
                        .WithMany("Tags")
                        .HasForeignKey("ClientHardwareId")
                        .HasConstraintName("fk_client_server_has_tags_client_hardware_client_hardware_id");

                    b.HasOne("Domain.Entities.ClientServers", "Server")
                        .WithMany("Tags")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_client_server_has_tags_client_servers_server_id");

                    b.HasOne("Domain.Entities.Tags", "Tag")
                        .WithMany("ClientServers")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_client_server_has_tags_tags_tag_id");

                    b.Navigation("Server");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Domain.Entities.ClientServers", b =>
                {
                    b.HasOne("Domain.Entities.Clients", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_client_servers_clients_client_id");

                    b.HasOne("Domain.Entities.ClientNetworks", "Network")
                        .WithMany()
                        .HasForeignKey("NetworkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_client_servers_client_networks_network_id");

                    b.Navigation("Client");

                    b.Navigation("Network");
                });

            modelBuilder.Entity("Domain.Entities.ClientServersHasAssets", b =>
                {
                    b.HasOne("Domain.Entities.Assets", "Asset")
                        .WithMany("Servers")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_client_server_has_assets_assets_asset_id");

                    b.HasOne("Domain.Entities.ClientHardware", null)
                        .WithMany("Assets")
                        .HasForeignKey("ClientHardwareId")
                        .HasConstraintName("fk_client_server_has_assets_client_hardware_client_hardware_id");

                    b.HasOne("Domain.Entities.ClientServers", "Server")
                        .WithMany("Assets")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_client_server_has_assets_client_servers_server_id");

                    b.Navigation("Asset");

                    b.Navigation("Server");
                });

            modelBuilder.Entity("Domain.Entities.Clients", b =>
                {
                    b.HasOne("Domain.Entities.Countries", "Country")
                        .WithMany("Clients")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_clients_countries_country_id");

                    b.HasOne("Domain.Entities.ApplicationUser", "OwnerUser")
                        .WithMany("Clients")
                        .HasForeignKey("OwnerUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_clients_users_owner_user_id");

                    b.HasOne("Domain.Entities.Clients", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("fk_clients_clients_parent_id");

                    b.Navigation("Country");

                    b.Navigation("OwnerUser");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Domain.Entities.ConfigurableEntityColumnDefinition", b =>
                {
                    b.HasOne("Domain.Entities.ConfigurableCategories", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("fk_configurable_entity_column_definitions_configurable_categor");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Domain.Entities.ConfigurableUserView", b =>
                {
                    b.HasOne("Domain.Entities.ConfigurableUserView", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .HasConstraintName("fk_configurable_user_views_configurable_user_views_parent_id");

                    b.HasOne("Domain.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_configurable_user_views_users_user_id");

                    b.Navigation("Parent");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.ConfigurableUserViewHasConfigurableEntityColumnDefinition", b =>
                {
                    b.HasOne("Domain.Entities.ConfigurableEntityColumnDefinition", "ConfigurableEntityColumnDefinition")
                        .WithMany("Views")
                        .HasForeignKey("ConfigurableEntityColumnDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_configurable_user_view_has_configurable_entity_column_defin");

                    b.HasOne("Domain.Entities.ConfigurableUserView", "ConfigurableUserView")
                        .WithMany("Columns")
                        .HasForeignKey("ConfigurableUserViewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_configurable_user_view_has_configurable_entity_column_defin1");

                    b.Navigation("ConfigurableEntityColumnDefinition");

                    b.Navigation("ConfigurableUserView");
                });

            modelBuilder.Entity("Domain.Entities.ConfigurableUserViewHasConfigurableUserViewTags", b =>
                {
                    b.HasOne("Domain.Entities.ConfigurableUserView", "ConfigurableUserView")
                        .WithMany("Tags")
                        .HasForeignKey("ConfigurableUserViewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_configurable_user_view_has_configurable_user_view_tags_conf");

                    b.HasOne("Domain.Entities.ConfigurableUserViewTags", "ConfigurableUserViewTags")
                        .WithMany("Views")
                        .HasForeignKey("ConfigurableUserViewTagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_configurable_user_view_has_configurable_user_view_tags_conf1");

                    b.Navigation("ConfigurableUserView");

                    b.Navigation("ConfigurableUserViewTags");
                });

            modelBuilder.Entity("Domain.Entities.ConfigurableUserViewTags", b =>
                {
                    b.HasOne("Domain.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_configurable_user_view_tags_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.ConfigurableUserViewsFilters", b =>
                {
                    b.HasOne("Domain.Entities.ConfigurableUserViewsFilterMacros", "FilterMacroValue")
                        .WithMany()
                        .HasForeignKey("FilterMacroValueId")
                        .HasConstraintName("fk_configurable_user_view_filters_configurable_user_view_filte");

                    b.HasOne("Domain.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_configurable_user_view_filters_users_user_id");

                    b.HasOne("Domain.Entities.ConfigurableUserView", "View")
                        .WithMany()
                        .HasForeignKey("ViewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_configurable_user_view_filters_configurable_user_views_view");

                    b.Navigation("FilterMacroValue");

                    b.Navigation("User");

                    b.Navigation("View");
                });

            modelBuilder.Entity("Domain.Entities.Contacts", b =>
                {
                    b.HasOne("Domain.Entities.Countries", "Country")
                        .WithMany("Contacts")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_contacts_countries_country_id");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Domain.Entities.ProviderHasContact", b =>
                {
                    b.HasOne("Domain.Entities.Contacts", "Contact")
                        .WithMany("Providers")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_providers_has_contacts_contacts_contact_id");

                    b.HasOne("Domain.Entities.Providers", "Provider")
                        .WithMany("Contacts")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_providers_has_contacts_providers_provider_id");

                    b.Navigation("Contact");

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("Domain.Entities.ProviderHasProviderCategory", b =>
                {
                    b.HasOne("Domain.Entities.ProviderCategory", "Category")
                        .WithMany("Providers")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_providers_has_provider_category_provider_category_category_");

                    b.HasOne("Domain.Entities.Providers", "Provider")
                        .WithMany("Categories")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_providers_has_provider_category_providers_provider_id");

                    b.Navigation("Category");

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("Domain.Entities.Providers", b =>
                {
                    b.HasOne("Domain.Entities.Countries", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_providers_countries_country_id");

                    b.HasOne("Domain.Entities.Media", "Logo")
                        .WithMany()
                        .HasForeignKey("LogoId")
                        .HasConstraintName("fk_providers_media_logo_id");

                    b.Navigation("Country");

                    b.Navigation("Logo");
                });

            modelBuilder.Entity("Domain.Entities.VendorHasContact", b =>
                {
                    b.HasOne("Domain.Entities.Contacts", "Contact")
                        .WithMany("Vendors")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_vendor_has_contacts_contacts_contact_id");

                    b.HasOne("Domain.Entities.Vendors", "Vendor")
                        .WithMany("Contacts")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_vendor_has_contacts_vendors_vendor_id");

                    b.Navigation("Contact");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("Domain.Entities.Vendors", b =>
                {
                    b.HasOne("Domain.Entities.Clients", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .HasConstraintName("fk_vendors_clients_client_id");

                    b.HasOne("Domain.Entities.Countries", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_vendors_countries_country_id");

                    b.HasOne("Domain.Entities.Media", "Logo")
                        .WithMany()
                        .HasForeignKey("Media")
                        .HasConstraintName("fk_vendors_media_media");

                    b.Navigation("Client");

                    b.Navigation("Country");

                    b.Navigation("Logo");
                });

            modelBuilder.Entity("Domain.Entities.VendorsMetaData", b =>
                {
                    b.HasOne("Domain.Entities.Vendors", "Vendor")
                        .WithMany()
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_vendor_metadata_vendors_vendor_id");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Domain.Entities.AspNetRoles", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_role_claims_asp_net_roles_role_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_claims_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_logins_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_tokens_asp_net_users_user_id");
                });

            modelBuilder.Entity("Domain.Entities.ApplicationUser", b =>
                {
                    b.Navigation("ActivityLogs");

                    b.Navigation("Clients");

                    b.Navigation("Preferences");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Domain.Entities.AspNetRoles", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Domain.Entities.Assets", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("Networks");

                    b.Navigation("Servers");
                });

            modelBuilder.Entity("Domain.Entities.ClientEmployees", b =>
                {
                    b.Navigation("Assets");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("Domain.Entities.ClientHardware", b =>
                {
                    b.Navigation("Assets");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("Domain.Entities.ClientNetworks", b =>
                {
                    b.Navigation("Assets");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("Domain.Entities.ClientServers", b =>
                {
                    b.Navigation("Assets");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("Domain.Entities.Clients", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("Contacts");
                });

            modelBuilder.Entity("Domain.Entities.ConfigurableEntityColumnDefinition", b =>
                {
                    b.Navigation("Views");
                });

            modelBuilder.Entity("Domain.Entities.ConfigurableUserView", b =>
                {
                    b.Navigation("Columns");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("Domain.Entities.ConfigurableUserViewTags", b =>
                {
                    b.Navigation("Views");
                });

            modelBuilder.Entity("Domain.Entities.Contacts", b =>
                {
                    b.Navigation("Providers");

                    b.Navigation("Vendors");
                });

            modelBuilder.Entity("Domain.Entities.Countries", b =>
                {
                    b.Navigation("ClientContacts");

                    b.Navigation("Clients");

                    b.Navigation("Contacts");
                });

            modelBuilder.Entity("Domain.Entities.ProviderCategory", b =>
                {
                    b.Navigation("Providers");
                });

            modelBuilder.Entity("Domain.Entities.Providers", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("Contacts");
                });

            modelBuilder.Entity("Domain.Entities.Tags", b =>
                {
                    b.Navigation("ClientEmployees");

                    b.Navigation("ClientNetworks");

                    b.Navigation("ClientServers");
                });

            modelBuilder.Entity("Domain.Entities.Vendors", b =>
                {
                    b.Navigation("Contacts");
                });
#pragma warning restore 612, 618
        }
    }
}
