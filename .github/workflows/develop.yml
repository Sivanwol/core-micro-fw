name: Develop workflow CD
on:
  push:
    branches: ["develop"]
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
jobs:
  Run-CI:
    runs-on: ubuntu-latest
    name: CI Runner
    needs: [ backend-api-service, frontend-platforms ]
    steps:
      - name: Run CI
        run: |
          echo "CI is running"
  
  backend-test-CI:
    runs-on: ubuntu-latest
    name: Backend Test Runner
    strategy:
      matrix:
        projectPaths:
          - "Domain.Persistence.Test"
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8
          dotnet-quality: "preview"
      # service tests
      - name: Run Tests
        run: |
          for path in ${{ join( matrix.projectPaths , ' ')}} }}; do
            echo "Tests Start for $path"
            cd ${{ github.workspace }}/backend/$path && dotnet restore
            cd ${{ github.workspace }}/backend/$path && dotnet build --no-restore
            cd ${{ github.workspace }}/backend/$path && dotnet test --no-build --verbosity normal
            echo "Tests Finished for $path"
          done
  backend-api-service:
    runs-on: ubuntu-latest
    name: Front Api Validation & Build
    needs: [ backend-test-CI ]
    steps:
      - uses: actions/checkout@v3
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8
          dotnet-quality: "preview"
      # build and compile
      - name: Restore dependencies
        run: cd ${{ github.workspace }}/backend/Services/Backend && dotnet restore
      - name: Build
        run: cd ${{ github.workspace }}/backend/Services/Backend && dotnet build --no-restore
  node-setup:
    runs-on: ubuntu-latest
    name: Setup Node
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"
          cache-dependency-path: ${{ github.workspace }}/frontend/package-lock.json
  frontend-platforms:
    name: Frontend Platforms Lint & Build
    needs: [node-setup]
    runs-on: ubuntu-latest
    permissions:
      contents: "read"
      actions: "read"
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Cache npm dependencies
        uses: actions/cache@v2
        with:
          path: ${{ github.workspace }}/frontend
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - uses: nrwl/nx-set-shas@v3
      - name: Install JS dependencies
        run: cd ${{ github.workspace }}/frontend && npm ci
      - name: running nx operations
        run: |
          cd ${{ github.workspace }}/frontend 
          npx nx affected -t lint --parallel=3
          npx nx affected -t test --parallel=3 --configuration=ci
          npx nx affected -t build --parallel=3

  build-image-front-api-service:
    name: Register Docker Images front-api as Package
    runs-on: ubuntu-latest
    needs: [Run-CI]
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Extract metadata (tags, labels) for Docker on backend api
        id: backend-meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}_backend_api
          labels: |
            maintainer=DockerBuilder
            org.opencontainers.image.title=front-api-build
            org.opencontainers.image.description=Front Api Build
            org.opencontainers.image.vendor=wolberg-pro
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha

      # build and compile
      - name: Restore dependencies
        run: cd ${{ github.workspace }}/backend/Services/Backend && dotnet restore
      - name: Build
        run: cd ${{ github.workspace }}/backend/Services/Backend && dotnet build --no-restore
      # build and push image
      - name: Build and push Docker image on Front Api
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          file: backend/Services/FrontApi/frontApi.CI.Dockerfile
          push: ${{ github.event_name != 'pull_request' && github.ref == 'refs/heads/develop'}}
          tags: ${{ steps.backend-meta.outputs.tags }}
          labels: ${{ steps.backend-meta.outputs.labels }}
