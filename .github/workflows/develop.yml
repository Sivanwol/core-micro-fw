name: Develop workflow CD
on:
  push:
    branches: ["develop"]
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
jobs:
  backend-test-CI:
    runs-on: ubuntu-latest
    name: Backend Test Runner
    strategy:
      matrix:
        projectPaths:
          - "Domain.Persistence.Test"
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8
          dotnet-quality: "preview"
      # service tests
      - name: Run Tests
        run: |
          for path in ${{ join( matrix.projectPaths , ' ')}} }}; do
            echo "Tests Start for $path"
            cd ${{ github.workspace }}/backend/$path && dotnet restore
            cd ${{ github.workspace }}/backend/$path && dotnet build --no-restore
            cd ${{ github.workspace }}/backend/$path && dotnet test --no-build --verbosity normal
            echo "Tests Finished for $path"
          done
  backend-api-service:
    runs-on: ubuntu-latest
    name: Front Api Validation & Build
    needs: [ backend-test-CI ]
    steps:
      - uses: actions/checkout@v3
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8
          dotnet-quality: "preview"
      # build and compile
      - name: Restore dependencies
        run: cd ${{ github.workspace }}/backend/Services/Backend && dotnet restore
      - name: Build
        run: cd ${{ github.workspace }}/backend/Services/Backend && dotnet build --no-restore
  frontend-platforms:
    name: Frontend Platforms & Build
    runs-on: macos-latest
    permissions:
      contents: "read"
      actions: "read"
    strategy:
      matrix:
        projectPaths:
          - "clientFront"
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
      - name: Build And Test Frontend Clients
        run: |
          for path in ${{ join( matrix.projectPaths , ' ')}} }}; do
            echo "Tests Start for $path"
            cd ${{ github.workspace }}/frontend/$path && flutter pub get
            cd ${{ github.workspace }}/frontend/$path && flutter test
            cd ${{ github.workspace }}/frontend/$path && flutter build apk
            cd ${{ github.workspace }}/frontend/$path && flutter build ios --release --no-codesign
            cd ${{ github.workspace }}/frontend/$path && flutter build web
            echo "Tests Finished for $path"
          done
      - name: Archive Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.projectPaths }}-artifacts
          path: |
            ${{ github.workspace }}/frontend/clientFront/build/app/outputs/apk/release/app-release.apk
            ${{ github.workspace }}/frontend/clientFront/build/web
            ${{ github.workspace }}/frontend/clientFront/build/ios/iphoneos/Runner.app    
  

  build-image-backend-api-service:
    name: Register Docker Images backend-api as Package
    runs-on: ubuntu-latest
    needs: [ backend-api-service, frontend-platforms ]
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Extract metadata (tags, labels) for Docker on backend api
        id: backend-meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}_backend_api
          labels: |
            maintainer=DockerBuilder
            org.opencontainers.image.title=front-api-build
            org.opencontainers.image.description=Front Api Build
            org.opencontainers.image.vendor=wolberg-pro
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha

      # build and compile
      - name: Restore dependencies
        run: cd ${{ github.workspace }}/backend/Services/Backend && dotnet restore
      - name: Build
        run: cd ${{ github.workspace }}/backend/Services/Backend && dotnet build --no-restore
      # build and push image
      - name: Build and push Docker image on Front Api
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          file: backend/Services/FrontApi/frontApi.CI.Dockerfile
          push: ${{ github.event_name != 'pull_request' && github.ref == 'refs/heads/develop'}}
          tags: ${{ steps.backend-meta.outputs.tags }}
          labels: ${{ steps.backend-meta.outputs.labels }}
