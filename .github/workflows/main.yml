# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: Main CI

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**/*.md'
      - '**/*.gitignore'
      - '**/*.gitattributes'
  pull_request:
    branches: [ main ]
  workflow_dispatch:
permissions:
  contents: read

env:
  DOTNET_NOLOGO: true                     # Disable the .NET logo
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true # Disable the .NET first time experience
  DOTNET_CLI_TELEMETRY_OPTOUT: true       # Disable sending .NET CLI telemetry

jobs:
  Run-CI:
    runs-on: ubuntu-latest
    name: CI Runner
    needs: [ backend-api-service, frontend-platforms ]
    steps:
      - name: Run CI
        run: |
          echo "CI is running"
  
  projects-test-CI:
    runs-on: ubuntu-latest
    name: Projects Test Runner
    strategy:
      matrix:
        projectPaths:
          - "Domain.Persistence.Test"
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8
          dotnet-quality: "preview"
      # service tests
      - name: Run Tests
        run: |
          for path in ${{ join( matrix.projectPaths , ' ')}} }}; do
            echo "Tests Start for $path"
            cd ${{ github.workspace }}/backend/$path && dotnet restore
            cd ${{ github.workspace }}/backend/$path && dotnet build --no-restore
            cd ${{ github.workspace }}/backend/$path && dotnet test --no-build --verbosity normal
            echo "Tests Finished for $path"
          done

  client-dashboard-platform:
    runs-on: ubuntu-latest
    name: Client Dashboard Validation & Build
    needs: [ projects-test-CI ]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8
          dotnet-quality: "preview"
      - uses: actions/setup-java@v2
        with:
          distribution: 'microsoft'
          java-version: '21'

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v1.1
        with:
          vs-prerelease: true
      - name: Install MAUI Workloads
        run: |
          dotnet workload install android --ignore-failed-sources
          dotnet workload install maui --ignore-failed-sources
      # build and compile
      - name: Restore dependencies
        run: cd ${{ github.workspace }}/backend/Clients/Dashboard && dotnet restore
      - name: Build Android
        run: cd ${{ github.workspace }}/backend/Clients/Dashboard && dotnet build -c Release -f net8.0-android --no-restore
      - name: Upload Android Artifact
        uses: actions/upload-artifact@v2.3.1
        with:
          name: android-ci-build
          path: ${{ github.workspace }}/backend/Clients/Dashboard/bin/Release/*-android/*Signed.a*
      - name: Build IOS
        run: cd ${{ github.workspace }}/backend/Clients/Dashboard && dotnet build -c Release -f net8.0-android --no-restore
      - name: Upload iOS Artifact
        uses: actions/upload-artifact@v2.3.1
        with:
          name: ios-ci-build
          path: ${{ github.workspace }}/backend/Clients/Dashboard/bin/Release/*-ios/**/*.app/
      - name: Build Windows
        run: cd ${{ github.workspace }}/backend/Clients/Dashboard && msbuild Dashboard.csproj -r -p:Configuration=Release -p:RestorePackages=false /p:GenerateAppxPackageOnBuild=true
      - name: Upload Windows Artifact
        uses: actions/upload-artifact@v2.3.1
        with:
          name: windows-ci-build
          path: ${{ github.workspace }}/backend/Clients/Dashboard/bin/Release/*-windows*/**/Dashboard*.msix
  backend-api-service:
    runs-on: ubuntu-latest
    name: Front Api Validation & Build
    needs: [ projects-test-CI ]
    steps:
      - uses: actions/checkout@v3
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8
          dotnet-quality: "preview"
      # build and compile
      - name: Restore dependencies
        run: cd ${{ github.workspace }}/backend/Services/Backend && dotnet restore
      - name: Build
        run: cd ${{ github.workspace }}/backend/Services/Backend && dotnet build --no-restore
  node-setup:
    runs-on: ubuntu-latest
    name: Setup Node
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"
          cache-dependency-path: ${{ github.workspace }}/frontend/package-lock.json
  frontend-platforms:
    name: Frontend Platforms Lint & Build
    needs: [node-setup]
    runs-on: ubuntu-latest
    permissions:
      contents: "read"
      actions: "read"
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Cache npm dependencies
        uses: actions/cache@v2
        with:
          path: ${{ github.workspace }}/frontend
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - uses: nrwl/nx-set-shas@v3
      - name: Install JS dependencies
        run: cd ${{ github.workspace }}/frontend && npm ci
      - name: running nx operations
        run: |
          cd ${{ github.workspace }}/frontend 
          npx nx affected -t lint --parallel=3
          npx nx affected -t test --parallel=3 --configuration=ci
          npx nx affected -t build --parallel=3
